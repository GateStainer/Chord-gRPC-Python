syntax = "proto3";

package server;

service Server {
    rpc find_successor(FindSucRequest) returns (FindSucResponse) {}
    rpc live_predecessor(PredecessorRequest) returns (PredecessorResponse) {}
    rpc find_succlist(EmptyRequest) returns (FindSucclistResponse) {}
    rpc find_predecessor(EmptyRequest) returns (FindPredResponse) {}
    rpc rectify(RectifyRequest) returns (EmptyResponse) {}
    //defined by ourselves
    rpc replicate_entries(ReplicateRequest) returns (ReplicateResponse){}
    rpc get(GetRequest) returns (GetResponse) {}
    rpc put(PutRequest) returns (PutResponse) {}
}

enum ReturnCode {
    SUCCESS = 0;
    FAILURE = 1;
}

message EmptyRequest {

}

message EmptyResponse {

}

message RectifyRequest {
    int32 id = 1;
    string ip = 2;
}

message FindSucRequest {
    int32 id = 1;
}

message FindSucResponse {
    int32 id = 1;
    string ip = 2;
}

message FindPredResponse {
    int32 id = 1;
    string ip = 2;
}

message FindSucclistResponse {
    repeated int32 id_list = 1;
    repeated string ip_list = 2;
}

message PredecessorRequest {
    int32 id = 1;
}

message PredecessorResponse {
    ReturnCode ret = 1;
}

//hash result of the
message LogEntry {
    int32 hashID = 1;
    string key = 2;
    string val = 3;
}

message ReplicateRequest{
    repeated LogEntry entries = 1;
}

message ReplicateResponse{
    ReturnCode ret = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string response = 1;
    int32 nodeID = 2;
    string nodeIP = 3;
}

message PutRequest {
    string key = 1;
    string value = 2;
}

message PutResponse {
    ReturnCode ret = 1;
    int32 nodeID = 2;
    string nodeIP = 3;
}